#!/bin/sh

# web/.husky/pre-commit 是一个 Git 钩子脚本，用于在提交代码到仓库之前执行一系列检查。
# 这个脚本主要对 api 和 web 目录下的修改进行检查，确保代码风格一致性和单元测试通过。
# 1.如果 api 目录被修改，则运行 ruff linter 进行代码风格检查，并自动修复可修复的问题。如果 linter 检查失败，则打印错误信息并退出提交。
# 2.如果 web 目录被修改，则切换到 web 目录，运行 lint-staged 进行代码风格检查。同时，检查 utils 目录下的修改文件，
# 确保每个修改的文件都有对应的单元测试文件，并运行这些单元测试。如果单元测试失败，则打印错误信息并退出提交。


# get the list of modified files
files=$(git diff --cached --name-only)

# check if api or web directory is modified

api_modified=false
web_modified=false

for file in $files
do
    # Use POSIX compliant pattern matching
    case "$file" in
        api/*.py)
            # set api_modified flag to true
            api_modified=true
            ;;
        web/*)
            # set web_modified flag to true
            web_modified=true
            ;;
    esac
done

# run linters based on the modified modules

if $api_modified; then
    echo "Running Ruff linter on api module"

    # python style checks rely on `ruff` in path
    if ! command -v ruff > /dev/null 2>&1; then
        echo "Installing linting tools (Ruff, dotenv-linter ...) ..."
        poetry install -C api --only lint
    fi

    # run Ruff linter auto-fixing
    ruff check --fix ./api

    # run Ruff linter checks
    ruff check  ./api || status=$?

    status=${status:-0}


    if [ $status -ne 0 ]; then
      echo "Ruff linter on api module error, exit code: $status"
      echo "Please run 'dev/reformat' to fix the fixable linting errors."
      exit 1
    fi
fi

if $web_modified; then
    echo "Running ESLint on web module"
    cd ./web || exit 1
    lint-staged

    echo "Running unit tests check"
    modified_files=$(git diff --cached --name-only -- utils | grep -v '\.spec\.ts$' || true)

    if [ -n "$modified_files" ]; then
        for file in $modified_files; do
            test_file="${file%.*}.spec.ts"
            echo "Checking for test file: $test_file"

            # check if the test file exists
            if [ -f "../$test_file" ]; then
                echo "Detected changes in $file, running corresponding unit tests..."
                pnpm run test "../$test_file"

                if [ $? -ne 0 ]; then
                    echo "Unit tests failed. Please fix the errors before committing."
                    exit 1
                fi
                echo "Unit tests for $file passed."
            else
                echo "Warning: $file does not have a corresponding test file."
            fi

        done
        echo "All unit tests for modified web/utils files have passed."
    fi

    cd ../
fi
